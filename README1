# Worktile iOS

## 概述

Worktile 的 iOS 主工程

## Build
- iOS的主工程为LessChat-iOS
- 工程通过配置文件：`/Config/XXX.xcconfig` 进行配置

## XCode 设置
- tab缩进设置为2
- 排版缩进设置为2
- 换行缩进设置为2

## 工程结构（依赖关系）
- 主工程以多个target形式管理依赖的模块
- LessChat-iOS（主工程）依赖：LessChatKit、lesschatcore、WorktileCore、应用模块
- LessChatKit依赖：lesschatcore、第三方库（多为UI）
- lesschatcore依赖：OC\C\C++的第三方库
- WorktileCore依赖：lesschatcore、第三方库
- 应用模块：LessChatKit、[WorktileCore]、[lesschatcore]
- 参见：[LessChat-iOS Dependence](LessChat-iOS_dependence.png)

## Modules
> 模块化开发的产物，作为一个完整的分离模块，一般是一个完整的功能，目前以子工程的形式存在主工程中

### 构建过程
1. 创建Cocoa Touch Framework工程
2. 修改Development target不能高于主工程
3. 工程结构参考 [iOS Submodule Architecture](ios_submodule_architecture.png)  
4. 保持umbrella文件(`$FramewotkName$.h`)可访问性为public
5. 由于Swift的Framework工程不允许`Bridging-Header.h`文件，所以用到的Object-C头文件的写在umbrella文件中

### LessChatSandbox
> iOS target，负责应用模块开发的环境，提供了登录环境

- 为了快速开发，将submodule 以子工程的形式引用到该target下
- 包括了基本的登录流程

## 编码规范 (CODE STYLE)
[YCTech Code Style](https://github.com/atinc/lesschatcodestyle)
[Worktile Swift Code Style](https://github.com/atinc/lcios/blob/dev/SWIFT_STYLE_GUIDE.md)


## LessChatKit
>项目中公用的部分，主要负责App层、UI层的基础类和公共的功能以及提供各模块之间交互的通道。被主工程及各个模块引用。

- 包括base的和自定义的`ViewController`、`View`、`Categories`、工具类、第三方库（如Snapkit,SDWebImage,MBProgress）等
- 因一些特殊需求LessChatKit引用了LessChatCore
- 各模块中公共的部分（View层）统一封装后放到此target中，并做好注释

## lesschatcore
核心库，包括网络请求、数据解析及数据模型、缓存、im等，详情请查看 [lesschatcore README](https://github.com/atinc/lccore/blob/master/README.md)

## WorktileCore
Swift 版本的核心库，用来替代 lesschatcore [WorktileCore README](/WorktileCore/README.md)

## 结构设计
>MVC模式设计

- Classes : ViewControllers
- View : Storyboards
- Resources : 国际化文件以及一些资源文件
- Vendor : 第三方库
- LessChatKit : 项目中公共的UI库
- lesschatcore : 核心库
- WorktileCore : swift 版本核心库
- Modules : 功能模块

## iOS工程UI层编码规范（基于Swift）
> 以下定义之外遵循 [GitHub's Swift Style Guide](https://github.com/github/swift-style-guide) 规范，并且接受[SwiftLint](https://github.com/realm/SwiftLint)的检查  
> 以下规则必须遵循

1. 控制器类需继承`LCKViewController`
1. 导航控制器需使用或继承`LCKNavigationController`
1. 列表控件使用或继承`LCKTableView`，数据加载时需要对应设置`LCKTableView.status`
1. 每个类要注释说明，按照以下格式：

```
/// 此类的功能说明
///
/// 参数: 必要的参数
///
/// @since 当前版本号
/// @author 作者
/// @update by 更新作者 更新内容
```
类内部的注释：

```
// MARK: - Public
// MARK: - Commons
// MARK: - Property
// MARK: - Lifecycle
// MARK: - Privete
每个分组的注释之间空两行
```

示例 Controller 格式：

```
/// 这是***
///
/// @since 6.0
/// @author yuanjilee
enum EnumName {
  // 枚举声明的作用域：按照使用范围决定写在类内部还是外部
}

/// 这是***
///
/// 参数: <#参数#>
///
/// @since 6.0
/// @author yuanjilee
class ClassName {

  // MARK: - Public Property
  
  // MARK: - Private Property
     // 私有变量，包括静态变量
  
  // MARK: - Lifecycle
  
}

extension ClassName {
  
  // MARK: - Public (公开方法)

}

extension ClassName {
  
  // MARK: - Protocols
  
  
  // MARK: - Protocols
  
}


extension ClassName {
  
  // MARK: - Private
  // 包括 _setupAppearance() _setupDataSource()
  
}

extension ClassName {
  
  // MARK: - Event
  
}

```

命名尽量实现自文档化，如果不能用一句话描述一个方法或一个类的作用，那要考虑一下设计是够有问题。

1. 私有方法用 private声明，并且以_(下划线)开头
1. ViewController 建议实现 `_setupAppearance()`、`_setupDataSource()`两个私有方法，分别处理UI和数据源
	1. 写一个功能的时候，首先去 LessChatKit 中看一下这个功能是不是已经封装过，还要看一下`Vendor`中的第三方库，是否提供了这个功能；若两个模块中用到的相同的功能，要提取出来，放到 LessChatKit 中
1. 相同的代码不要写两遍，封装
1. assets中的资源文件(图片)，拖入之前要重命名为英文，规范是 `icon_<模块名>_<位置>_<名称>[_<其它描述>]`，例：icon_task_list_more
1. 严格遵循MVC的架构，View中的事件要用过Block或者delegate传递出来，不要在View中做业务处理（比如网络请求）
1. 页面之间传值一般要传ID，通过Fetch方法获取到ID对应的对象，以防止操作指针产生的一些错误
1. UITableview 实现了自动Cell高度，使用时注意。
1. 由于是Universal的工程，要考虑到横竖屏切换的情况，所以，要求所有的View都通过AutoLayout约束，除非你有更好的方法；StoryBoard设置约束的时候，SizeClass要设置为wAny&hAny
1. 目前项目中编码规范有不统一的地方，新写的代码遵循新的编码规范。此编码规范会不断更新与改进，遵循的同时也要灵活运用

## 一些必须遵循的小技巧

1. 日志收集：`WorktileCore.Log`类，根据不同的日志等级调用不同的方法

	``` swift
    case verbose 
    case debug 调试过程中需要打印在控制台的，
    case info 突出程序的允许过程
    case warning 潜在错误警告信息
    case error 错误信息但不影响程序运行，不应该出现的、可能会被保存的
	```


## 第三方库(FRAMEWORK)

iOS:

<1> MBProgressHUD (https://github.com/jdg/MBProgressHUD)
Copyright (c) 2013 Matej Bukovinski
Licence: MIT

<2> SDWebImage (https://github.com/rs/SDWebImage)
Copyright (c) 2009 Olivier Poitrey
Licence: MIT

<3> Nimbus (https://github.com/jverkoey/nimbus)
Copyright (c) Jeff Verkoeyen 2011-2014
Licence: Apache 2.0 (http://www.apache.org/licenses/LICENSE-2.0)

<4> SZTextView (https://github.com/glaszig/SZTextView)
Copyright (c) 2013 glaszig <glaszig@gmail.com>
Licence: MIT

<5> google-code-prettify (https://code.google.com/p/google-code-prettify)
Copyright (c) Google Inc.
Licence: Apache License 2.0

<6> FXBlurView (https://github.com/nicklockwood/FXBlurView)
Copyright (C) 2013 Charcoal Design
Licence description:
This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.

Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:

The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
This notice may not be removed or altered from any source distribution.

<7> ICETutorial (https://github.com/icepat/ICETutorial)
Copyright (c) 2013 Patrick Trillsam
Licence: MIT

<8> THChatInput (https://github.com/skela/THChatInput)
Copyright (c) 2014 Marat
Licence: MIT

<9> SWTableViewCell (https://github.com/CEWendel/SWTableViewCell)
Copyright (c) 2013 Chris Wendel
Licence: MIT

<10> YLProgressBar (https://github.com/yannickl/YLProgressBar)
Copyright 2012 - present, Yannick Loriot.

<11> MJRefresh (https://github.com/CoderMJLee/MJRefresh)

<12> FontAwesome (https://github.com/PrideChung/FontAwesomeKit)
Licence: MIT

<13> SnapKit (https://github.com/SnapKit/SnapKit) - Swift版的AutoLayout库
Copyright (c) 2011-2015 SnapKit Team
Licence: MIT

<14> IQKeyboardManager (https://github.com/hackiftekhar/IQKeyboardManager)
Licence: MIT

<15> MMMarkdown (https://github.com/mdiep/MMMarkdown)
An Objective-C framework for converting Markdown to HTML.
Licence: MIT

<16> DZNEmptyDataSet (https://github.com/dzenbot/DZNEmptyDataSet)
Licence: MIT

<17> CVCalendar (https://github.com/Mozharovsky/CVCalendar)
A custom visual calendar for iOS 8+ written in Swift (2.0).
Licence: MIT

<18> CTAssetsPickerController (https://github.com/chiunam/CTAssetsPickerController)
iOS control that allows picking multiple photos and videos from user's photo library.
Licence: MIT

<19> Eureka (https://github.com/xmartlabs/Eureka)
Elegant iOS form builder in Swift
Licence: MIT
Modify: `FormViewController` extends `LCKViewController`

#### 项目中添加的语法糖三方库
1. [Then](https://github.com/devxoul/Then)
    初始化Label，设置属性：
    
    ```swift
    let label: UILabel = {
        let label = UILabel()
        label.textAlignment = .center
        label.textColor = .black
        label.text = "Hello, World!"
        return label
    }()
    ```
    使用Then：
    
    ```swift
    let label = UILabel().then {
        $0.textAlignment = .center
        $0.textColor = .black
        $0.text = "Hello, World!"
    }
    ```
    
2. [Reusable](https://github.com/AliSoftware/Reusable)
    使用可复用的系统控件：UITableViewCell/UICollectionViewCell
    
    ```swift
    /// 注册
    tableView.register(TableViewCell.self, forCellReuseIdentifier: "identifier")
    /// 复用       
    tableView.dequeueReusableCell(withIdentifier: "identifier", for: indexPath) as! TableViewCell
    ```
    使用Reusable：
    
    ```swift
    /// 注册
    tableView.register(cellType: TableViewCell.self)
    /// 复用
    tableView.dequeueReusableCell(for: indexPath, cellType: TableViewCell.self)
    ```

## License
See `LICENSE` for details.

